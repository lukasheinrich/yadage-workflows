stages:
  - name: recast
    dependencies: [init]
    scheduler:
      scheduler_type: jq-stage
      bindings:
        pars: {'$wflowref': ['.init[]','.parameters']}
        nevents: {'$wflowref': ['.init[]','.nevents']}
        energy: {'$wflowref': ['.init[]','.run_conditions.energy']}
      stepscript: >
        {pars: [.pars[][][]], nevents: .nevents[][], energy: .energy[][]} | [{
          xv: .pars[0], 
          yv: .pars[1],
          nevents: .nevents,
          energy: .energy,
          output: "{workdir}/recast.json"
        }]
      step:
        process:
          process_type: 'interpolated-script-cmd'
          interpreter: python
          script: |
            import json
            import math

            print 'running for xv: {xv} yv: {yv} at energy: {energy} for nevents: {nevents}'

            def func_with_off(x,y, off):
                return 1-math.tanh((x/700.*2*off)**2 + (y/200.*2*off)**2)

            result_data = {{
               "lower_2sig_expected_CLs": func_with_off({xv},{yv}, off = 1.2),
               "lower_1sig_expected_CLs": func_with_off({xv},{yv}, off = 1.1),
               "expected_CLs": func_with_off({xv},{yv}, off = 1.0),
               "upper_1sig_expected_CLs": func_with_off({xv},{yv}, off = 0.9),
               "upper_2sig_expected_CLs": func_with_off({xv},{yv}, off = 0.8),
               "observed_CLs": func_with_off({xv},{yv}, off = 0.95),
            }}

            print 'result'
            print result_data

            with open('{output}','w') as f:
              json.dump(result_data,f)
        publisher:
          publisher_type: 'frompar-pub'
          outputmap:
            resultfile: output
        environment:
          environment_type: 'docker-encapsulated'
          image: python
          imagetag: '2.7'
